options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: csp_tx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, -4.0]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1.2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 4.0]
    rotation: 0
    state: enabled
- name: bladeRF_sink_0
  id: bladeRF_sink
  parameters:
    affinity: ''
    alias: ''
    bias_tee0: 'False'
    bias_tee1: 'False'
    bw: '5000'
    comment: ''
    dac: '10000'
    dc_calibration: LPF_TUNING
    device_id: '0'
    feature: default
    fpga_image: ''
    fpga_reload: 'False'
    freq: 437e6
    gain0: '50'
    gain1: '10'
    if_gain0: '20'
    if_gain1: '20'
    in_clk: ONBOARD
    lpf_mode: disabled
    maxoutbuf: '0'
    metadata: 'False'
    minoutbuf: '0'
    nchan: '1'
    out_clk: 'False'
    ref_clk: 10e6
    sample_format: 16bit
    sample_rate: samp_rate
    sampling: internal
    show_pmic: 'False'
    smb: '0'
    tamer: internal
    trigger0: 'False'
    trigger1: 'False'
    trigger_role0: master
    trigger_role1: master
    trigger_signal0: J51_1
    trigger_signal1: J51_1
    use_dac: 'False'
    use_ref_clk: 'False'
    verbosity: info
    xb200: none
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2168, 380.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 300.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/thomas/Desktop/GFSK_test.bin
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 540.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_1
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/thomas/Desktop/csp_packet.bin
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 556.0]
    rotation: 0
    state: true
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: Send ping every 5 seconds
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.cons(pmt.make_dict(), pmt.init_u8vector(10,(0x80, 0x81, 0x02, 0xc8, 0x15,
      0x41, 0x00, 0x00, 0x00, 0x00)))
    period: '5000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 148.0]
    rotation: 0
    state: true
- name: blocks_stream_to_tagged_stream_2
  id: blocks_stream_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_len: (687*250)
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 468.0]
    rotation: 0
    state: true
- name: blocks_tag_gate_2
  id: blocks_tag_gate
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    propagate_tags: 'False'
    single_key: '""'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 468.0]
    rotation: 0
    state: true
- name: digital_burst_shaper_xx_1
  id: digital_burst_shaper_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    insert_phasing: 'False'
    length_tag_name: '"packet_len"'
    maxoutbuf: '250'
    minoutbuf: '0'
    post_padding: '100000'
    pre_padding: '100000'
    type: complex
    window: ([1])
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1880, 444.0]
    rotation: 0
    state: enabled
- name: digital_gfsk_mod_0
  id: digital_gfsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.8'
    comment: ''
    do_unpack: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: '250'
    sensitivity: '0.0167'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 452.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    This\
      \ block takes packed bits and looks for 5 consequitive 1 bits,\n    which upon\
      \ discovy a 0 bit it inserted right after the 5 consequitive bits. \n\n    PDU_in:\
      \ packed bits (bytes)\n    PDU_out: unpacked bits\n    \"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Bit stuffer',   # will show up in GRC\n      \
      \      in_sig=None,\n            out_sig=None,\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.message_port_register_in(pmt.intern('PDU_in'))\n\
      \        self.message_port_register_out(pmt.intern('PDU_out'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bytestream\
      \ from PDU\n        bytestream = np.array(pmt.to_python(pmt.cdr(msg))) \n\n\
      \        #Convert from bytestream to bitstream\n        bitstream = self.bytes_to_bits(bytestream)\n\
      \n        #Stuff the bitstream\n        stuffed_bitstream = self.bit_stuffing(bitstream)\n\
      \        \n        #Convert the stuffed bitstream to PDU\n        outgoing_msg\
      \ = pmt.init_u8vector(len(stuffed_bitstream),(stuffed_bitstream))\n        pdu\
      \ = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n\n    def bytes_to_bits(self, byte_array):\n        \n        #Create\
      \ empty list to hold the binary values\n        binary_list = []\n\n       \
      \ #Loop over the byte array to extract the bits from each byte\n        for\
      \ byte in byte_array:\n            #remove the 0b formatting by using the slice\
      \ function\n            binary_str = bin(byte)[2:] \n\n            #insert zero\
      \ padding in order to verify leading zeros are present\n            binary_str\
      \ = binary_str.zfill(8)\n\n            #Insert bits into the binary list one\
      \ at a time\n            binary_list.extend([int(bit) for bit in binary_str])\n\
      \        \n        #Convert list to numpy array\n        binary_array = np.array(binary_list)\n\
      \n        return binary_array\n    \n    def bit_stuffing(self, non_stuffed_array,\
      \ max_consecutive_ones=5, stuff_bit=0):\n        #create stuffed array to hold\
      \ the new bitstream\n        stuffed_array = []\n\n        consecutive_ones_counter\
      \ = 0\n\n        #loop over the non stuffed array\n        for bit in non_stuffed_array:\n\
      \            if bit == 1:\n                consecutive_ones_counter += 1\n \
      \               if consecutive_ones_counter == max_consecutive_ones:\n     \
      \               stuffed_array.extend([bit])\n                    stuffed_array.extend([int(stuff_bit)])\n\
      \                    consecutive_ones_counter = 0\n                else:\n \
      \                   stuffed_array.extend([bit])\n            else:\n       \
      \         stuffed_array.extend([bit])\n                consecutive_ones_counter\
      \ = 0\n\n        return np.array(stuffed_array)\n\n\n"
    affinity: ''
    alias: ''
    comment: Bit stuffing
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''Bit stuffer'', ''blk'', [], [(''PDU_in'', ''message'', 1)], [(''PDU_out'',
      ''message'', 1)], ''\n    This block takes packed bits and looks for 5 consequitive
      1 bits,\n    which upon discovy a 0 bit it inserted right after the 5 consequitive
      bits. \n\n    PDU_in: packed bits (bytes)\n    PDU_out: unpacked bits\n    '',
      [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 304.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    This\
      \ block srcrambles an input PDU consisting of unpacked bytes.\n    The Additive\
      \ scrambling is compliant with the 255-bit pseudo-randomizer\n    desribed in\
      \ section 10 in CCSDS 131.0-B-5 (TM Blue Book)\n\n    Note: as the scrambler\
      \ is additive, applying it twice will return\n    the original message. \n\n\
      \    PDU_in:  unpacked bits\n    PDU_out: scrambled unpacked bits\n    \"\"\"\
      \n\n    def __init__(self):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='CCSDS Additive Scrambler',   # will show\
      \ up in GRC\n            in_sig=None,\n            out_sig=None\n        )\n\
      \n        self.pn_lut = np.zeros(255, dtype=np.uint8)\n        self.generate_pn_lut()\n\
      \n        self.message_port_register_in(pmt.intern('PDU_in'))\n        self.message_port_register_out(pmt.intern('PDU_out'))\n\
      \        self.set_msg_handler(pmt.intern('PDU_in'), self.handle_msg)\n\n\n \
      \   def handle_msg(self, msg):\n        bitstream = np.array(pmt.to_python(pmt.cdr(msg)))\n\
      \        scr_bitstream = np.zeros(len(bitstream), dtype=np.uint8) \n       \
      \ for i in range(len(bitstream)):\n            scr_bitstream[i] = np.uint8(bitstream[i])\
      \ ^ np.uint8(self.pn_lut[i%255])\n\n        #Convert the scrambled bitstream\
      \ to PDU\n        outgoing_msg = pmt.init_u8vector(len(scr_bitstream),(scr_bitstream))\n\
      \        pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n    \n    def generate_pn_lut(self):\n\n        #Define shift register\n\
      \        sr = 0b11111111\n        \n        #Update shift register\n       \
      \ for i in range(255):\n            self.pn_lut[i] = sr & 1\n            nb\
      \ = self.pn_xor(sr)\n            sr = sr >> 1\n            sr = sr | (nb <<\
      \ 7)\n            \n            \n    def pn_xor(self, sr):\n        return\
      \ (((sr & 0b01) >> 0) ^ ((sr & 0b00001000) >> 3) ^ ((sr & 0b00100000) >> 5)\
      \ ^ ((sr & 0b10000000) >> 7)) & 1\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''CCSDS Additive Scrambler'', ''blk'', [], [(''PDU_in'', ''message'',
      1)], [(''PDU_out'', ''message'', 1)], ''\n    This block srcrambles an input
      PDU consisting of unpacked bytes.\n    The Additive scrambling is compliant
      with the 255-bit pseudo-randomizer\n    desribed in section 10 in CCSDS 131.0-B-5
      (TM Blue Book)\n\n    Note: as the scrambler is additive, applying it twice
      will return\n    the original message. \n\n    PDU_in:  unpacked bits\n    PDU_out:
      scrambled unpacked bits\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 160.0]
    rotation: 0
    state: true
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    This\
      \ block takes packed bits and looks for 5 consequitive 1 bits,\n    which upon\
      \ discovy a 0 bit it inserted right after the 5 consequitive bits. \n\n    PDU_in:\
      \ unpacked RS-FEC and scrambled bits\n    PDU_out: unpacked bits ready to be\
      \ transmitted\n    \"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.basic_block.__init__(\n            self,\n            name='DISCO\
      \ HDLC Framer',   # will show up in GRC\n            in_sig=None,\n        \
      \    out_sig=None,\n        )\n        # if an attribute with the same name\
      \ as a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.message_port_register_in(pmt.intern('PDU_in'))\n     \
      \   self.message_port_register_out(pmt.intern('PDU_out'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bytestream\
      \ from PDU\n        bitstream = np.array(pmt.to_python(pmt.cdr(msg))) \n\n \
      \       #Define various sequences and flags\n        preamble = np.array([1,0,1,0,1,0,1,0])\
      \ #34 times in the beginning\n        HDLC_flag = np.array([0,1,1,1,1,1,1,0])\
      \ #2 times, once before and after msg\n        post_HDLC_preamble = preamble\n\
      \        postamble1 = np.array([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1])\n\
      \        postamble2 = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1])\n\n\
      \        total_preamble = np.array([])\n\n        for i in range(34):\n    \
      \        total_preamble = np.append(total_preamble,preamble)\n\n        bits_to_be_transmitted\
      \ = np.concatenate((total_preamble[:-1],HDLC_flag,post_HDLC_preamble,bitstream,HDLC_flag,postamble1,postamble2))\n\
      \        \n        #Convert the stuffed bitstream to PDU\n        outgoing_msg\
      \ = pmt.init_u8vector(len(bits_to_be_transmitted),(bits_to_be_transmitted.astype(np.uint8)))\n\
      \        pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n\n\n\n\n"
    affinity: ''
    alias: ''
    comment: "HDLC Framing \n(and various other bits)\nbits are fully framed now."
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''DISCO HDLC Framer'', ''blk'', [], [(''PDU_in'', ''message'', 1)],
      [(''PDU_out'', ''message'', 1)], ''\n    This block takes packed bits and looks
      for 5 consequitive 1 bits,\n    which upon discovy a 0 bit it inserted right
      after the 5 consequitive bits. \n\n    PDU_in: unpacked RS-FEC and scrambled
      bits\n    PDU_out: unpacked bits ready to be transmitted\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 304.0]
    rotation: 0
    state: true
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    PDU_in:\
      \ 1,0,1,0,1,0,1,0 (ex)\n    PDU_out: 0xAA\n    \"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Pack 8 bits',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        \n        self.message_port_register_in(pmt.intern('PDU_in'))\n\
      \        self.message_port_register_out(pmt.intern('PDU_out'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n\n    def handle_msg(self, msg):\n        bitstream =\
      \ np.array(pmt.to_python(pmt.cdr(msg)))\n        bytestream = np.packbits(bitstream)\n\
      \n\n        #Convert the bytestream to PDU\n        outgoing_msg = pmt.init_u8vector(len(bytestream),(bytestream))\n\
      \        pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''Pack 8 bits'', ''blk'', [], [(''PDU_in'', ''message'', 1)], [(''PDU_out'',
      ''message'', 1)], ''\n    PDU_in: 1,0,1,0,1,0,1,0 (ex)\n    PDU_out: 0xAA\n    '',
      [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 160.0]
    rotation: 0
    state: true
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    PDU_in:\
      \ 0xAE (ex.)\n    PDU_out: 1,0,1,0,1,1,1,0\n    \"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Unpack 8 bits',   # will show up in GRC\n     \
      \       in_sig=None,\n            out_sig=None\n        )\n        \n      \
      \  self.message_port_register_in(pmt.intern('PDU_in'))\n        self.message_port_register_out(pmt.intern('PDU_out'))\n\
      \        self.set_msg_handler(pmt.intern('PDU_in'), self.handle_msg)\n\n\n \
      \   def handle_msg(self, msg):\n        bytestream = np.array(pmt.to_python(pmt.cdr(msg)))\
      \ \n        bitstream = np.unpackbits(bytestream)\n\n        #Convert the bytestream\
      \ to PDU\n        outgoing_msg = pmt.init_u8vector(len(bitstream),(bitstream))\n\
      \        pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''Unpack 8 bits'', ''blk'', [], [(''PDU_in'', ''message'', 1)], [(''PDU_out'',
      ''message'', 1)], ''\n    PDU_in: 0xAE (ex.)\n    PDU_out: 1,0,1,0,1,1,1,0\n    '',
      [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 160.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_1
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 300.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '600'
    srate: '1000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 284.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '127500'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 620.0]
    rotation: 0
    state: disabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.001'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 380.0]
    rotation: 0
    state: enabled
- name: satellites_encode_rs_ccsds_0
  id: satellites_encode_rs_ccsds
  parameters:
    affinity: ''
    alias: ''
    basis: 'False'
    comment: Reed-Solomon Encoding of the packet
    interleave: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 148.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: Rs_encoded_scrambled
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 156.0]
    rotation: 0
    state: true
- name: virtual_sink_2
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: transmitted_bits
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 396.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: Rs_encoded_scrambled
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 300.0]
    rotation: 0
    state: true

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_message_strobe_0, strobe, satellites_encode_rs_ccsds_0, in]
- [blocks_stream_to_tagged_stream_2, '0', digital_burst_shaper_xx_1, '0']
- [blocks_tag_gate_2, '0', blocks_stream_to_tagged_stream_2, '0']
- [digital_burst_shaper_xx_1, '0', bladeRF_sink_0, '0']
- [digital_gfsk_mod_0, '0', blocks_file_sink_0, '0']
- [digital_gfsk_mod_0, '0', blocks_tag_gate_2, '0']
- [digital_gfsk_mod_0, '0', qtgui_time_sink_x_1, '0']
- [digital_gfsk_mod_0, '0', qtgui_waterfall_sink_x_0, '0']
- [epy_block_0, PDU_out, epy_block_2, PDU_in]
- [epy_block_0_1, PDU_out, epy_block_2_0, PDU_in]
- [epy_block_2, PDU_out, pdu_pdu_to_tagged_stream_1, pdus]
- [epy_block_2_0, PDU_out, virtual_sink_1, '0']
- [epy_block_3, PDU_out, epy_block_0_1, PDU_in]
- [pdu_pdu_to_tagged_stream_1, '0', blocks_char_to_float_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', blocks_file_sink_1, '0']
- [pdu_pdu_to_tagged_stream_1, '0', digital_gfsk_mod_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', virtual_sink_2, '0']
- [satellites_encode_rs_ccsds_0, out, epy_block_3, PDU_in]
- [virtual_source_1, '0', epy_block_0, PDU_in]

metadata:
  file_format: 1
  grc_version: 3.10.7.0
