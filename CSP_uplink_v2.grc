options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: CSP_uplink_v2
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: length_tag
  id: variable_tag_object
  parameters:
    comment: ''
    key: pmt.intern("packet_len")
    offset: '0'
    src: pmt.intern("src")
    value: ' pmt.from_long(1)'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 252.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1.2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: bladeRF_sink_0
  id: bladeRF_sink
  parameters:
    affinity: ''
    alias: ''
    bias_tee0: 'False'
    bias_tee1: 'False'
    bw: '20000'
    comment: ''
    dac: '10000'
    dc_calibration: LPF_TUNING
    device_id: '0'
    feature: default
    fpga_image: ''
    fpga_reload: 'False'
    freq: 437e6
    gain0: '30'
    gain1: '10'
    if_gain0: '20'
    if_gain1: '20'
    in_clk: ONBOARD
    lpf_mode: disabled
    maxoutbuf: '0'
    metadata: 'False'
    minoutbuf: '0'
    nchan: '1'
    out_clk: 'False'
    ref_clk: 10e6
    sample_format: 16bit
    sample_rate: samp_rate
    sampling: internal
    show_pmic: 'False'
    smb: '0'
    tamer: internal
    trigger0: 'False'
    trigger1: 'False'
    trigger_role0: master
    trigger_role1: master
    trigger_signal0: J51_1
    trigger_signal1: J51_1
    use_dac: 'False'
    use_ref_clk: 'False'
    verbosity: verbose
    xb200: none
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 804.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 724.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/thomas/Desktop/GFSK_test.bin
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 956.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_1
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2736, 1192.0]
    rotation: 0
    state: disabled
- name: blocks_pack_k_bits_bb_0
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 436.0]
    rotation: 0
    state: true
- name: blocks_pack_k_bits_bb_0_0
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 1188.0]
    rotation: 0
    state: disabled
- name: blocks_pack_k_bits_bb_2
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 572.0]
    rotation: 0
    state: true
- name: blocks_stream_to_tagged_stream_0
  id: blocks_stream_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_len: '33'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1880, 1180.0]
    rotation: 0
    state: disabled
- name: blocks_tag_gate_0
  id: blocks_tag_gate
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    propagate_tags: 'False'
    single_key: '""'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1528, 1180.0]
    rotation: 0
    state: disabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1320, 724.0]
    rotation: 0
    state: true
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 572.0]
    rotation: 0
    state: true
- name: blocks_unpack_k_bits_bb_0_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 996.0]
    rotation: 0
    state: disabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: This is the actual CSP data
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[length_tag]'
    type: byte
    vector: (1, 0, 0,1,1,1,0,1)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 420.0]
    rotation: 0
    state: true
- name: digital_additive_scrambler_bb_0
  id: digital_additive_scrambler_bb
  parameters:
    affinity: ''
    alias: ''
    bits_per_byte: '1'
    comment: ''
    count: '0'
    len: '7'
    mask: '0xa9'
    maxoutbuf: '0'
    minoutbuf: '0'
    reset_tag_key: packet_len
    seed: '0xff'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 1148.0]
    rotation: 0
    state: disabled
- name: digital_additive_scrambler_bb_1
  id: digital_additive_scrambler_bb
  parameters:
    affinity: ''
    alias: ''
    bits_per_byte: '1'
    comment: scramble the signal
    count: '0'
    len: '7'
    mask: '0xa9'
    maxoutbuf: '0'
    minoutbuf: '0'
    reset_tag_key: '"packet_len"'
    seed: '0xff'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 532.0]
    rotation: 0
    state: true
- name: digital_gfsk_mod_0
  id: digital_gfsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.7'
    comment: ''
    do_unpack: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: '500'
    sensitivity: '0.1'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 972.0]
    rotation: 0
    state: disabled
- name: digital_gmsk_mod_0
  id: digital_gmsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '1'
    comment: ''
    do_unpack: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: '250'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 884.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    This\
      \ block takes packed bits and looks for 5 consequitive 1 bits,\n    which upon\
      \ discovy a 0 bit it inserted right after the 5 consequitive bits. \n\n    PDU_in:\
      \ packed bits (bytes)\n    PDU_out: unpacked bits\n    \"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Bit stuffer',   # will show up in GRC\n      \
      \      in_sig=None,\n            out_sig=None,\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.message_port_register_in(pmt.intern('PDU_in'))\n\
      \        self.message_port_register_out(pmt.intern('PDU_out'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bytestream\
      \ from PDU\n        bytestream = np.array(pmt.to_python(pmt.cdr(msg))) \n\n\
      \        #Convert from bytestream to bitstream\n        bitstream = self.bytes_to_bits(bytestream)\n\
      \n        #Stuff the bitstream\n        stuffed_bitstream = self.bit_stuffing(bitstream)\n\
      \        \n        #Convert the stuffed bitstream to PDU\n        outgoing_msg\
      \ = pmt.init_u8vector(len(stuffed_bitstream),(stuffed_bitstream))\n        pdu\
      \ = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n\n    def bytes_to_bits(self, byte_array):\n        \n        #Create\
      \ empty list to hold the binary values\n        binary_list = []\n\n       \
      \ #Loop over the byte array to extract the bits from each byte\n        for\
      \ byte in byte_array:\n            #remove the 0b formatting by using the slice\
      \ function\n            binary_str = bin(byte)[2:] \n\n            #insert zero\
      \ padding in order to verify leading zeros are present\n            binary_str\
      \ = binary_str.zfill(8)\n\n            #Insert bits into the binary list one\
      \ at a time\n            binary_list.extend([int(bit) for bit in binary_str])\n\
      \        \n        #Convert list to numpy array\n        binary_array = np.array(binary_list)\n\
      \n        return binary_array\n    \n    def bit_stuffing(self, non_stuffed_array,\
      \ max_consecutive_ones=5, stuff_bit=0):\n        #create stuffed array to hold\
      \ the new bitstream\n        stuffed_array = []\n\n        consecutive_ones_counter\
      \ = 0\n\n        #loop over the non stuffed array\n        for bit in non_stuffed_array:\n\
      \            if bit == 1:\n                consecutive_ones_counter += 1\n \
      \               if consecutive_ones_counter == max_consecutive_ones:\n     \
      \               stuffed_array.extend([bit])\n                    stuffed_array.extend([int(stuff_bit)])\n\
      \                    consecutive_ones_counter = 0\n                else:\n \
      \                   stuffed_array.extend([bit])\n            else:\n       \
      \         stuffed_array.extend([bit])\n                consecutive_ones_counter\
      \ = 0\n\n        return np.array(stuffed_array)\n\n\n"
    affinity: ''
    alias: ''
    comment: Bit stuffing
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''Bit stuffer'', ''blk'', [], [(''PDU_in'', ''message'', 1)], [(''PDU_out'',
      ''message'', 1)], ''\n    This block takes packed bits and looks for 5 consequitive
      1 bits,\n    which upon discovy a 0 bit it inserted right after the 5 consequitive
      bits. \n\n    PDU_in: packed bits (bytes)\n    PDU_out: unpacked bits\n    '',
      [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 728.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nfrom gnuradio import\
      \ gr\nimport numpy as np\nimport pmt\n \nclass msg_block(gr.basic_block):\n\
      \    '''\n    Remove stuffed bits from a message i.e, the bits followed by \n\
      \    five consequitive ones. \n    '''\n    def __init__(self):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"Bit de-stuffer\",\n            in_sig=None,\n\
      \            out_sig=None)\n\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('pdu_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bitstream\
      \ from message\n        bitstream = np.array(pmt.to_python(msg)) \n        \n\
      \n        \"\"\"Remove one bit preceded by five consequitive ones\"\"\"\n  \
      \      compare_array = np.array([1,1,1,1,1])\n\n\n        for i in range(len(bitstream)-5):\n\
      \            if np.array_equal(bitstream[i:i+5],compare_array):\n          \
      \      #Mark stuffed bits such that they can be removed later\n            \
      \    #If they are removed now, the for loop will delete all\n              \
      \  #consequtive bits if 1111101 is received\n                bitstream[i+5]\
      \ = 2\n\n\n        bitstream_destuffed = np.delete(bitstream, np.where(bitstream\
      \ == 2))\n\n        #Convert destuffed frame to PMT\n        outgoing_msg =\
      \ pmt.init_u8vector(len(bitstream_destuffed),(bitstream_destuffed))\n      \
      \  pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('pdu_out'),\
      \ pdu)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Bit de-stuffer', 'msg_block', [], [('msg_in', 'message', 1)], [('pdu_out',
      'message', 1)], '\n    Remove stuffed bits from a message i.e, the bits followed
      by \n    five consequitive ones. \n    ', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1192.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nfrom gnuradio import\
      \ gr\nimport numpy as np\nimport pmt\n \nclass msg_block(gr.basic_block):\n\
      \    '''\n    Gets a message with the front HDLC flag removed by the\n    'sync\
      \ and create PDU block' and this block then removes\n    the last HDLC flag\
      \ and sends the prior bitstream\n    '''\n    def __init__(self):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"HDLC Deframer\",\n            in_sig=None,\n\
      \            out_sig=None)\n\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bitstream\
      \ from message\n        bitstream = np.array(pmt.to_python(pmt.cdr(msg))) \n\
      \n\n        hdlc_flag = np.array([0,1,1,1,1,1,1,0])\n        hdlc_index = 0\n\
      \        \n        #Find HDLC in bitstream\n        for i in range(len(bitstream)-len(hdlc_flag)):\n\
      \            bitstream_snippet = bitstream[i:i+len(hdlc_flag)]\n           \
      \ if (np.array_equal(bitstream_snippet,hdlc_flag)):\n                hdlc_index\
      \ = i\n                break\n        \n        #localize HDLC frame\n     \
      \   hdlc_frame = bitstream[0:hdlc_index]\n\n\n        #Convert HDLC frame to\
      \ PMT\n        outgoing_msg = pmt.to_pmt(hdlc_frame)\n\n        self.message_port_pub(pmt.intern('msg_out'),\
      \ outgoing_msg)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('HDLC Deframer', 'msg_block', [], [('msg_in', 'message', 1)], [('msg_out',
      'message', 1)], "\n    Gets a message with the front HDLC flag removed by the\n    'sync
      and create PDU block' and this block then removes\n    the last HDLC flag and
      sends the prior bitstream\n    ", [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 1192.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"\n    This\
      \ block takes packed bits and looks for 5 consequitive 1 bits,\n    which upon\
      \ discovy a 0 bit it inserted right after the 5 consequitive bits. \n\n    PDU_in:\
      \ unpacked RS-FEC and scrambled bits\n    PDU_out: unpacked bits ready to be\
      \ transmitted\n    \"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.basic_block.__init__(\n            self,\n            name='DISCO\
      \ HDLC Framer',   # will show up in GRC\n            in_sig=None,\n        \
      \    out_sig=None,\n        )\n        # if an attribute with the same name\
      \ as a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.message_port_register_in(pmt.intern('PDU_in'))\n     \
      \   self.message_port_register_out(pmt.intern('PDU_out'))\n        self.set_msg_handler(pmt.intern('PDU_in'),\
      \ self.handle_msg)\n\n    def handle_msg(self, msg):\n        #Get bytestream\
      \ from PDU\n        bitstream = np.array(pmt.to_python(pmt.cdr(msg))) \n\n \
      \       #Define various sequences and flags\n        preamble = np.array([1,0,1,0,1,0,1,0])\
      \ #34 times in the beginning\n        HDLC_flag = np.array([0,1,1,1,1,1,1,0])\
      \ #2 times, once before and after msg\n        post_HDLC_preamble = preamble\n\
      \        postamble1 = np.array([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1])\n\
      \        postamble2 = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1])\n\n\
      \        total_preamble = np.array([])\n\n        for i in range(34):\n    \
      \        total_preamble = np.append(total_preamble,preamble)\n\n        bits_to_be_transmitted\
      \ = np.concatenate((total_preamble[:-1],HDLC_flag,post_HDLC_preamble,bitstream,HDLC_flag,postamble1,postamble2))\n\
      \        \n        #Convert the stuffed bitstream to PDU\n        outgoing_msg\
      \ = pmt.init_u8vector(len(bits_to_be_transmitted),(bits_to_be_transmitted.astype(np.uint8)))\n\
      \        pdu = pmt.cons(pmt.make_dict(), outgoing_msg)\n\n        self.message_port_pub(pmt.intern('PDU_out'),\
      \ pdu)\n\n\n\n\n"
    affinity: ''
    alias: ''
    comment: "HDLC Framing \n(and various other bits)\nbits are fully framed now."
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''DISCO HDLC Framer'', ''blk'', [], [(''PDU_in'', ''message'', 1)],
      [(''PDU_out'', ''message'', 1)], ''\n    This block takes packed bits and looks
      for 5 consequitive 1 bits,\n    which upon discovy a 0 bit it inserted right
      after the 5 consequitive bits. \n\n    PDU_in: unpacked RS-FEC and scrambled
      bits\n    PDU_out: unpacked bits ready to be transmitted\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 728.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: 'Convert back to byte stream

      in order to use the additive scrambler

      block'
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 572.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 1188.0]
    rotation: 0
    state: disabled
- name: pdu_pdu_to_tagged_stream_1
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 724.0]
    rotation: 0
    state: true
- name: pdu_tagged_stream_to_pdu_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: Convert byte stream into a PDU
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 436.0]
    rotation: 0
    state: true
- name: pdu_tagged_stream_to_pdu_0_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2120, 1188.0]
    rotation: 0
    state: disabled
- name: pdu_tagged_stream_to_pdu_1
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: Back to PDU
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 572.0]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '512'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.01'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 860.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '600'
    srate: '1000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1528, 708.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.001'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 780.0]
    rotation: 0
    state: true
- name: satellites_decode_rs_ccsds_0
  id: satellites_decode_rs_ccsds
  parameters:
    affinity: ''
    alias: ''
    basis: 'False'
    comment: ''
    interleave: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2376, 1180.0]
    rotation: 0
    state: disabled
- name: satellites_encode_rs_ccsds_0
  id: satellites_encode_rs_ccsds
  parameters:
    affinity: ''
    alias: ''
    basis: 'False'
    comment: Reed-Solomon Encoding of the packet
    interleave: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 428.0]
    rotation: 0
    state: enabled
- name: satellites_sync_to_pdu_0
  id: satellites_sync_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    packlen: '280'
    sync: '"0101010101010101010101010111111010101010"'
    threshold: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 1172.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: RS_encoded
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 436.0]
    rotation: 0
    state: true
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: Rs_encoded_scrambled
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 572.0]
    rotation: 0
    state: true
- name: virtual_sink_2
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: transmitted_bits
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 820.0]
    rotation: 0
    state: disabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RS_encoded
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 572.0]
    rotation: 0
    state: true
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: Rs_encoded_scrambled
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 724.0]
    rotation: 0
    state: true
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: 'This simulates perfectly received baseband

      physical layer bits'
    stream_id: transmitted_bits
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1188.0]
    rotation: 0
    state: disabled

connections:
- [blocks_char_to_float_0, '0', blocks_throttle_0, '0']
- [blocks_pack_k_bits_bb_0, '0', pdu_tagged_stream_to_pdu_0, '0']
- [blocks_pack_k_bits_bb_0_0, '0', blocks_stream_to_tagged_stream_0, '0']
- [blocks_pack_k_bits_bb_2, '0', pdu_tagged_stream_to_pdu_1, '0']
- [blocks_stream_to_tagged_stream_0, '0', pdu_tagged_stream_to_pdu_0_0, '0']
- [blocks_tag_gate_0, '0', blocks_pack_k_bits_bb_0_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', digital_additive_scrambler_bb_1, '0']
- [blocks_unpack_k_bits_bb_0_0, '0', digital_gfsk_mod_0, '0']
- [blocks_vector_source_x_0, '0', blocks_pack_k_bits_bb_0, '0']
- [digital_additive_scrambler_bb_0, '0', blocks_tag_gate_0, '0']
- [digital_additive_scrambler_bb_1, '0', blocks_pack_k_bits_bb_2, '0']
- [digital_gfsk_mod_0, '0', blocks_file_sink_0, '0']
- [digital_gfsk_mod_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_gfsk_mod_0, '0', qtgui_waterfall_sink_x_0, '0']
- [digital_gmsk_mod_0, '0', bladeRF_sink_0, '0']
- [digital_gmsk_mod_0, '0', blocks_file_sink_0, '0']
- [digital_gmsk_mod_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_gmsk_mod_0, '0', qtgui_waterfall_sink_x_0, '0']
- [epy_block_0, PDU_out, epy_block_2, PDU_in]
- [epy_block_0_0, pdu_out, pdu_pdu_to_tagged_stream_0_0, pdus]
- [epy_block_1, msg_out, epy_block_0_0, msg_in]
- [epy_block_2, PDU_out, pdu_pdu_to_tagged_stream_1, pdus]
- [pdu_pdu_to_tagged_stream_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [pdu_pdu_to_tagged_stream_0_0, '0', digital_additive_scrambler_bb_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', blocks_char_to_float_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', blocks_unpack_k_bits_bb_0_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', digital_gfsk_mod_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', digital_gmsk_mod_0, '0']
- [pdu_pdu_to_tagged_stream_1, '0', virtual_sink_2, '0']
- [pdu_tagged_stream_to_pdu_0, pdus, satellites_encode_rs_ccsds_0, in]
- [pdu_tagged_stream_to_pdu_0_0, pdus, satellites_decode_rs_ccsds_0, in]
- [pdu_tagged_stream_to_pdu_1, pdus, virtual_sink_1, '0']
- [satellites_decode_rs_ccsds_0, out, blocks_message_debug_1, print]
- [satellites_encode_rs_ccsds_0, out, virtual_sink_0, '0']
- [satellites_sync_to_pdu_0, out, epy_block_1, msg_in]
- [virtual_source_0, '0', pdu_pdu_to_tagged_stream_0, pdus]
- [virtual_source_1, '0', epy_block_0, PDU_in]
- [virtual_source_2, '0', satellites_sync_to_pdu_0, '0']

metadata:
  file_format: 1
